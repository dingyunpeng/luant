-- Copyright (C) 2016 Jian Zhang (Jack)
-- 文件：table.lua
-- 简介：lib.util.table单元测试

describe("test.code.lib.util.table", function()

  -- 原table功能测试
  describe("table", function()
    it("insert", function()
      res = {}
      table.insert(res, 'a')
      assert.truthy(res, {'a'})
    end)
  end)

  -- is_table
  describe("is_table", function()
    it("table", function()
      assert.truthy(table.is_table({}))
      assert.truthy(table.is_table({'a'}))
    end)
    it("no table", function()
      assert.falsy(table.is_table(true))
      assert.falsy(table.is_table(nil))
      assert.falsy(table.is_table(0))
      assert.falsy(table.is_table(''))
      assert.falsy(table.is_table(function () end))
    end)
  end)

  -- is_empty_table
  describe("is_empty_table", function()
    it("空数组", function()
      assert.truthy(table.is_empty_table({}))
    end)
    it("非空数组", function ()
      assert.falsy(table.is_empty_table({'a'}))
    end)
    it("非数组", function()
      assert.falsy(table.is_empty_table(true))
      assert.falsy(table.is_empty_table(nil))
      assert.falsy(table.is_empty_table(0))
      assert.falsy(table.is_empty_table(''))
      assert.falsy(table.is_empty_table(function () end))
    end)
  end)

  -- is_empty_table
  describe("is_noempty_table", function()
    it("空数组", function()
      assert.falsy(table.is_noempty_table({}))
    end)
    it("非空数组", function ()
      assert.truthy(table.is_noempty_table({'a'}))
    end)
    it("非数组", function()
      assert.falsy(table.is_noempty_table(true))
      assert.falsy(table.is_noempty_table(nil))
      assert.falsy(table.is_noempty_table(0))
      assert.falsy(table.is_noempty_table(''))
      assert.falsy(table.is_noempty_table(function () end))
    end)
  end)

  -- key_exists
  describe("key_exists", function()
    it("key存在", function()
      assert.truthy(table.key_exists({'a'}, 1))
      assert.truthy(table.key_exists({['a']='a'}, 'a'))
    end)
    it("key不存在", function ()
      assert.falsy(table.key_exists({'a'}, 2))
      assert.falsy(table.key_exists({a='a'}, 'b'))
    end)
    it("非数组", function()
      assert.falsy(table.key_exists(nil, 1))
    end)
  end)

  -- value_exists
  describe("value_exists", function()
    it("值存在", function()
      assert.truthy(table.value_exists({1, 'a'}, 1))
      assert.truthy(table.value_exists({1, 'a'}, 'a'))
      assert.truthy(table.value_exists({a='a'}, 'a'))
    end)
    it("值不存在", function ()
      assert.falsy(table.value_exists({1, 'a'}, 2))
      assert.falsy(table.value_exists({a='a'}, 'b'))
    end)
    it("非数组", function()
      assert.falsy(table.value_exists(nil, 1))
    end)
  end)

  -- len
  describe("len", function()
    it("计算数组长度", function()
      assert.are.same(table.len({1, 'a'}), 2)
      assert.are.same(table.len({1, 'a', a='a'}), 3)
      assert.are.same(table.len({}), 0)
    end)
    it("非数组", function()
      assert.falsy(table.len('a'))
    end)
  end)

  -- first_kv
  describe("first_kv", function()
    it("获取数组里第一对key value值", function()
      k, v = table.first_kv({1, 'a'})
      assert.are.same(k, 1)
      assert.are.same(v, 1)

      k, v = table.first_kv({'a', 'b'})
      assert.are.same(k, 1)
      assert.are.same(v, 'a')

      k, v = table.first_kv({a='a', ab='ab'})
      assert.are.same(k, 'a')
      assert.are.same(v, 'a')

      k, v = table.first_kv({})
      assert.falsy(k)
      assert.falsy(v)
    end)
    it("空数组", function()
      k, v = table.first_kv({})
      assert.falsy(k)
      assert.falsy(v)
    end)
    it("非数组", function()
      k, v = table.first_kv('a')
      assert.falsy(k)
      assert.falsy(v)
    end)
  end)

  -- merge
  describe("merge", function()
    it("merge array", function()
      assert.are.same(table.merge({1}, {'a'}), {1, 'a'})
      assert.are.same(table.merge({[1]='a'}, {[2]='a'}), {'a'})
    end)
    it("merge dict", function()
      assert.are.same(table.merge({'a'}, {b='b'}), {'a', b='b'})
      assert.are.same(table.merge({a='a'}, {b='b'}), {a='a', b='b'})
    end)
  end)

  -- select
  describe("select", function()
    it("array", function()
      assert.are.same(table.select({1, 'a'}, {1}), {1})
      assert.are.same(table.select({'a', b='b'}, {1}), {'a'})
      assert.are.same(table.select({a='a', b='b'}, {'a'}), {a='a'})
    end)
    it("not array", function()
      assert.are.same(table.select({a='a', b='b'}, 'a'), {})
      assert.are.same(table.select('a', {'a'}), {})
    end)
  end)

end)