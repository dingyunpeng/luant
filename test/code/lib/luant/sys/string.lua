-- Copyright (C) 2016 Jian Zhang (Jack)
-- 文件：string.lua
-- 简介：lib.util.string单元测试

describe("test.code.lib.util.string", function()

  -- string 功能测试
  describe("string", function()
    it("len", function()
        assert.are.same(3, string.len('aaa'))
    end)
  end)

  -- is_string
  describe("is_string", function()
    it("string", function()
      assert.truthy(string.is_string('abc'))
      assert.truthy(string.is_string(''))
    end)
    it("not string", function()
      assert.falsy(string.is_string(true))
      assert.falsy(string.is_string(nil))
      assert.falsy(string.is_string(0))
      assert.falsy(string.is_string({}))
      assert.falsy(string.is_string(function () end))
    end)
  end)

  -- is_empty_string
  describe("is_empty_string", function()
    it("空字符串", function()
      assert.truthy(string.is_empty_string(''))
    end)
    it("非空字符串", function()
      assert.falsy(string.is_empty_string(' '))
      assert.falsy(string.is_empty_string('aaa'))
    end)
    it("其它类型", function ()
      assert.falsy(string.is_empty_string(true))
      assert.falsy(string.is_empty_string(nil))
      assert.falsy(string.is_empty_string(0))
      assert.falsy(string.is_empty_string({}))
      assert.falsy(string.is_empty_string(function () end))
    end)
  end)

  -- is_noempty_string
  describe("is_noempty_string", function()
    it("空字符串", function()
      assert.falsy(string.is_noempty_string(''))
    end)
    it("非空字符串", function()
      assert.truthy(string.is_noempty_string(' '))
      assert.truthy(string.is_noempty_string('aaa'))
    end)
    it("其它类型", function ()
      assert.falsy(string.is_noempty_string(true))
      assert.falsy(string.is_noempty_string(nil))
      assert.falsy(string.is_noempty_string(0))
      assert.falsy(string.is_noempty_string({}))
      assert.falsy(string.is_noempty_string(function () end))
    end)
  end)

  -- trim
  describe("trim", function()
    it("字符串", function()
      assert.are.same('a', string.trim('a '))
      assert.are.same('a', string.trim(' a'))
      assert.are.same('a', string.trim(' a '))
      assert.are.same('a b', string.trim(' a b '))
      assert.are.same('a/b/c', string.trim(' a/b/c '))
    end)
    it("非字符串", function()
      assert.are.same(string.trim({'a'}), {'a'})
    end)
  end)

  -- startswith
  describe("startswith", function()
    it("startswith", function()
      assert.are.truthy(string.startswith('abc', 'a'))
      assert.are.truthy(string.startswith('abc', 'ab'))
    end)
    it("nil", function()
      assert.are.falsy(string.startswith(nil, 'a'))
      assert.are.falsy(string.startswith('abc', nil))
    end)
    it("no startswith", function()
      assert.are.falsy(string.startswith('abc', 'ac'))
      assert.are.falsy(string.startswith('abc', 'd'))
    end)
  end)

  -- endswith
  describe("endswith", function()
    it("endswith", function()
      assert.are.truthy(string.endswith('abc', 'c'))
      assert.are.truthy(string.endswith('abc', 'bc'))
    end)
    it("nil", function()
      assert.are.falsy(string.endswith(nil, 'a'))
      assert.are.falsy(string.endswith('abc', nil))
    end)
    it("no endswith", function()
      assert.are.falsy(string.endswith('abc', 'ac'))
      assert.are.falsy(string.endswith('abc', 'd'))
    end)
  end)

  -- indexOf
  describe("index_of", function()
    it("匹配", function()
      assert.are.same(1, string.index_of('abc', 'a'))
      assert.are.same(1, string.index_of('abc', 'ab'))
      assert.are.same(2, string.index_of('abc', 'bc'))
    end)
    it("不匹配", function()
      assert.are.falsy(string.last_index_of('abc', 'd'))
    end)
  end)

  -- last_index_of
  describe("last_index_of", function()
    it("匹配", function()
      assert.are.same(3, string.last_index_of('abc', 'c'))
      assert.are.same(2, string.last_index_of('abc', 'bc'))
      assert.are.same(5, string.last_index_of('abcabc', 'b'))
      assert.are.same(4, string.last_index_of('abcabc', 'abc'))
    end)
    it("不匹配", function()
      assert.are.falsy(string.last_index_of('abc', 'd'))
    end)
  end)

  -- split
  describe("split", function()
    it("常见单字符分割", function()
      assert.are.same({'a', 'b', 'c'}, string.split('a,b,c', ','))
    end)
    it("有限次单字符分割", function()
      assert.are.same({'a', 'b'}, string.split('a,b,c', ',', 2))
    end)
    it("无分割符", function()
      assert.are.same({[1]='abc'}, string.split('abc', ',', 2))
    end)
    it("非字符串", function()
      assert.are.same({}, string.split({}, ','))
    end)
  end)

  -- crc32
  describe("crc32", function()
    it("测试数据", function()
      assert.are.same(4175501327, string.crc32('xx'))
      assert.are.same(1295237797, string.crc32(nil))
    end)
    it("nil", function()
      assert.are.same(1295237797, string.crc32(nil))
    end)
  end)
 
end)